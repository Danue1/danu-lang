// type
bool
byte
char
i8 / i16 / i32 / i64 / i128 / isize
u8/ u16/ u32/ u64/ u128/ usize
f32 / f64
array

// literal
false
true

1
(1: i8)
(1: f32)
1.0
(1.0: f32)

'a'
b'a'
"abc"

[1, 'a', "abc"]
[1; 3]

// typealias
type Foo = Bar;

// enum
enum Foo = Bar | Baz | Bax;
enum Foo = Bar(Bar) | Baz(Baz) | Bax(Bax);

// struct
struct Foo(Bar);
let foo = Foo(bar);

struct Foo(Bar,);
let foo = Foo(bar);

struct Foo(Bar, Baz);
let foo = Foo(bar, baz);

struct Foo {
  bar: Bar
}
let foo = Foo { bar: bar };

struct Foo {
  bar: Bar,
}
let foo = Foo { bar: bar };

struct Foo {
  bar: Bar,
  baz: Baz
}
let foo = Foo { bar: bar, baz: baz };

// variable
let foo = ...;
let foo: Foo = ...;

let mut foo = ...;
let mut foo: Foo = ...;

const FOO: Foo = ...;
static FOO: Foo = ...;

// function
fn foo() { ... }
fn foo(a) { ... }
fn foo(a: A) { ... }

fn foo() -> Bar { ... }
fn foo(a) -> Bar { ... }
fn foo(a: A) -> Bar { ... }

fn foo() -> Bar = ...;
fn foo(a) -> Bar = ...;
fn foo(a: A) -> Bar = ...;

// trait
trait Foo {
  const BAR: Bar;
  const BAR: Bar = ...;

  fn bar();
  fn bar(a);
  fn bar(a: A);

  fn bar() { ... }
  fn bar(a) { ... }
  fn bar(a: A) { ... }

  fn bar() -> Baz { ... }
  fn bar(a) -> Baz { ... }
  fn bar(a: A) -> Baz { ... }

  fn bar() -> Baz = ...;
  fn bar(a) -> Baz = ...;
  fn bar(a: A) -> Baz = ...;
}

// method
impl Foo {
  const BAR: Bar = ...;

  fn bar() { ... }
  fn bar(a) { ... }
  fn bar(a: A) { ... }

  fn bar() -> Baz { ... }
  fn bar(a) -> Baz { ... }
  fn bar(a: A) -> Baz { ... }

  fn bar() -> Baz = ...;
  fn bar(a) -> Baz = ...;
  fn bar(a: A) -> Baz =...;

  fn bar(self) { ... }
  fn bar(self, a) { ... }
  fn bar(self, a: A) { ... }

  fn bar(self) -> Baz { ... }
  fn bar(self, a) -> Baz { ... }
  fn bar(self, a: A) -> Baz { ... }

  fn bar(self) -> Baz = ...;
  fn bar(self, a) -> Baz = ...;
  fn bar(self, a: A) -> Baz =...;
}

impl Foo for Bar;
impl Foo for Bar {
  fn baz() { ... };
  fn baz(a) { ... };
  fn baz(a: A) { ... };

  fn baz() -> Bax { ... };
  fn baz(a) -> Bax { ... };
  fn baz(a: A) -> Bax { ... };

  fn bar() -> Baz = ...;
  fn bar(a) -> Baz = ...;
  fn bar(a: A) -> Baz =...;

  fn bar(self) { ... }
  fn bar(self, a) { ... }
  fn bar(self, a: A) { ... }

  fn bar(self) -> Baz { ... }
  fn bar(self, a) -> Baz { ... }
  fn bar(self, a: A) -> Baz { ... }

  fn bar(self) -> Baz = ...;
  fn bar(self, a) -> Baz = ...;
  fn bar(self, a: A) -> Baz =...;
}

foo.bar();
foo::bar();

// control flows
if foo { ... } else if foo { ... } else { ... }
if let foo = bar { ... } else if let foo = bar { ... } else { ... }
if let Foo(foo) = bar { ... } else if let Foo(foo) = bar { ... } else { ... }

loop { ... }

while foo { ... }
while let foo = bar { ... }
while let Foo(foo) = bar { ... }

for foo in bar { ... }
for Foo(foo) in bar { ... }

match foo { bar -> ... }
match foo { bar -> ..., baz -> ... }
match foo { bar -> ..., baz -> { ... } }
match foo { Bar(bar) -> ... }
