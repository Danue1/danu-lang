pub trait Neg {
  type Output;

  fn neg(self) -> Self::Output;
}

impl Neg for Float {
  type Output = Float;

  fn neg(self) -> Self::Output = neg_float_to_float(self);
}

#[native]
pub fn neg_float_to_float(t: Float) -> Float { }

impl Neg for Int {
  type Output = Int;

  fn neg(self) -> Self::Output = neg_int_to_int(self);
}

#[native]
pub fn neg_int_to_int(t: Int) -> Int { }

impl Neg for Size {
  type Output = Size;

  fn neg(self) -> Self::Output = neg_size_to_size(self);
}

#[native]
pub fn neg_size_to_size(t: Size) -> Size { }

impl Neg for Uint {
  type Output = Uint;

  fn neg(self) -> Self::Output = neg_uint_to_uint(self);
}

#[native]
pub fn neg_uint_to_uint(t: Uint) -> Uint { }

impl Neg for Usize {
  type Output = Usize;

  fn neg(self) -> Self::Output = neg_usize_to_usize(self);
}

#[native]
pub fn neg_usize_to_usize(t: Usize) -> Usize { }
